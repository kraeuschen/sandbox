{
  "name": "mapred",
  "version": "0.1.0",
  "description": "Node.js native MapReduce implementation",
  "main": "main.js",
  "author": {
    "name": "Sergio Garcia Mondaray",
    "email": "sgmonda@gmail.com"
  },
  "keywords": [
    "google",
    "mapreduce",
    "cluster"
  ],
  "engines": {
    "node": "*"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/sgmonda/mapred"
  },
  "readme": "Google's MapReduce implementation for NodeJS.\n\nInstall\n=======\n\nTo install the most recent release from npm, run:\n\n    npm install mapred\n\nUse\n====\n\nTo load this module, simply write the following\n\n```javascript\nvar mapreduce = require('mapred')(); // multi-core execution (fastest)\n//var mapreduce = require('mapred')(1); // 1 = single core version (slowest)\n```\n\nThen, you can use mapreduce function in your code:\n\n```javascript\nmapreduce(information, function(key, value){\n    // Your map() implementation\n}, function(key, values){\n    // Your reduce() implementation\n}, function(result){\n   // This is your callback\n});\n```\n\nObviously, to use MapReduce (according to [Google's MapReduce specification](http://research.google.com/archive/mapreduce.html)) you have to implement two functions:\n\n* ``map(key1, value1) -> list(key2, value2)``: takes an input pair and produces a set of intermediate key/value pairs.\n* ``reduce(key2, list(value2)) -> list(value2)``: accepts an intermediate key and a set of values for that key, and merges together these values to form a possibly smaller set of values.\n\nExample\n-------\n\nThe most common example of using MapReduce is counting the number of occurrences of each word in a collection of texts. With ``mapred`` module, you can do it as follows:\n\n```javascript\nvar mapreduce = require('mapred')(); // Leave blank for max performance\n//var mapreduce = require('mapred')(1); // 1 = single core version (slowest)\n//var mapreduce = require('mapred')(3); // Use a cluster of 3 processes\n\n// Information to process =====================================================\n\nvar information = [\n    ['frase primera', 'primer trozo de informacion para procesado primer trozo'],\n    ['segunda frase', 'segundo trozo de informacion trozo de'],\n    ['cacho 3', 'otro trozo para ser procesado otro otro otro trozo'],\n    ['cuarta frase', 'primer trozo de informacion para procesado primer trozo'],\n    ['frase 5', 'segundo trozo de informacion trozo de'],\n    ['sexto cacho', 'otro trozo para ser procesado otro otro otro trozo']\n];\n\n// User map implementation =====================================================\n\nvar map = function(key, value){\n    var list = [], aux = {};\n    value = value.split(' ');\n    value.forEach(function(w){\n        aux[w] = (aux[w] || 0) + 1;\n    });\n    for(var k in aux){\n        list.push([k, aux[k]]);\n    }\n    return list;\n};\n\n// User reduce implementation =================================================\n\nvar reduce = function(key, values){\n    var sum = 0;\n    values.forEach(function(e){\n        sum += e;\n    });\n    return sum;\n};\n\n// MapReduce call =============================================================\n\nmapreduce(information, map, reduce, function(result){\n    console.log(result);\n});\n\n```\n\nIf you save the code above into a file called ``mapreduce_example.js`` and you run it with\n\n    node mapreduce_example.js\n\nYou'll get the following\n\n```\n{ de: 6,\n  informacion: 4,\n  otro: 8,\n  para: 4,\n  primer: 4,\n  procesado: 4,\n  segundo: 2,\n  ser: 2,\n  trozo: 12 }\n```\n\n\n",
  "readmeFilename": "README.md",
  "_id": "mapred@0.1.0",
  "_from": "mapred@*"
}
